{"version":3,"sources":["assets/img/logo_light.svg","assets/img/logo_dark.svg","components/logo/logo.js","components/logo/index.js","modules/auth/actions.js","modules/auth/reducer.js","modules/auth/selectors.js","modules/card/actions.js","modules/card/reducer.js","modules/card/selectors.js","modules/routes/actions.js","modules/routes/reducer.js","modules/routes/selectors.js","components/header/header.js","components/header/index.js","helpers/localStorage/index.js","layouts/main/index.js","layouts/main/main.js","appData/env.js","components/mapbox/index.js","components/mapbox/mapbox.js","pages/map/OrderForm/IsBookedMessage/index.js","pages/map/OrderForm/IsBookedMessage/isBookedMessage.js","pages/map/OrderForm/orderForm.js","pages/map/OrderForm/index.js","pages/map/EmptyProfileModal/index.js","pages/map/EmptyProfileModal/emptyProfileModal.js","pages/map/index.js","pages/map/map.js","components/Forms/clearIcon/clearIcon.js","components/Forms/clearIcon/index.js","components/Forms/profileForm/helpIcon/index.js","components/Forms/profileForm/helpIcon/helpIcon.js","components/Forms/profileForm/tooltipDefault/index.js","components/Forms/profileForm/tooltipDefault/tooltipDefault.js","components/Forms/profileForm/profileForm.js","components/Forms/profileForm/index.js","pages/profile/index.js","pages/profile/profile.js","components/Forms/loginForm/loginForm.js","components/Forms/loginForm/index.js","layouts/logout/index.js","layouts/logout/logout.js","pages/login/index.js","pages/login/login.js","pages/signup/index.js","pages/signup/signup.js","appData/pageList.js","components/Router/privateRoute/index.js","components/Router/privateRoute/privateRoute.js","components/Router/index.js","components/Router/router.js","components/app/index.js","components/app/app.js","helpers/loftTaxiApi/index.js","modules/auth/sagas.js","modules/card/sagas.js","modules/routes/sagas.js","modules/rootSaga.js","modules/index.js","store.js","index.js"],"names":["module","exports","Logo","type","this","props","path","logoLight","logoDark","alt","data-testid","className","src","Component","defaultProps","authRequest","createAction","authSuccess","authFailure","authLogout","regRequest","defaultState","isLoading","handleActions","isAuthorized","errors","_state","action","payload","token","combineReducers","getIsLoading","state","auth","getIsAuthorized","getToken","fetchCardRequest","setCardRequest","fetchCardSuccess","setCardSuccess","fetchCardFailure","setCardFailure","setProfileDefault","isExist","data","card","getIsExist","getData","fetchAddressListRequest","fetchAddressListSuccess","fetchAddressListFailure","fetchRouteRequest","fetchRouteSuccess","fetchRouteFailure","cancelOrder","placeOrder","setRoutesDefault","addressList","isBooked","route","getAddressList","routes","getIsBooked","getRoute","mapDispatchToProps","Header","connect","currentPage","menuClickHandler","event","target","dataset","pageId","pageList","login","id","localStorage","length","getItem","removeItem","cleanLocalStorageState","menu","Object","values","map","page","isNotInMenu","key","to","onClick","data-page-id","title","AppBar","position","color","Typography","MainLayout","children","MapBox","useState","setMap","mapContainer","useRef","useEffect","MapBoxGL","Map","accessToken","ENV","container","current","style","center","zoom","on","resize","initializeMap","checkLayerExist","layerRemove","markersClear","drawRoute","layerId","removeLayer","removeSource","markers","document","querySelectorAll","forEach","call","marker","remove","getLayer","coordinates","flyTo","addLayer","source","properties","geometry","layout","paint","drawMarks","pop","coordsStart","coordsEnd","markerStart","createElement","Marker","setLngLat","addTo","markerEnd","ref","IsBookedMessage","variant","component","Button","size","OrderForm","addressListDefault","makeOrder","from","setFrom","setTo","setAddressList","canOrder","setCanOrder","filter","address","setDefaultOrderFormState","Grid","Paper","onSubmit","preventDefault","addressFrom","addressTo","item","xs","Autocomplete","options","onChange","newValue","onFromChangeHanlder","getOptionSelected","option","renderInput","params","TextField","label","margin","onToChangeHanlder","disabled","fullWidth","EmptyProfileModal","profileIsLoading","elevation","justify","alignItems","Link","profile","MapPage","profileIsChecked","ClearIcon","cursor","fontSize","HelpIcon","marginLeft","TooltipDefault","withStyles","tooltip","backgroundColor","border","display","justifyContent","width","height","Tooltip","ProfileForm","rootClass","showPassword","setShowPassword","initialValues","cardNumber","expiryDate","Date","cardName","cvc","masks","formatCardNumber","value","onlyNumbers","replace","formatString","formatCvc","formatCardName","handleClickShowPassword","handleMouseDownPassword","formatDate","date","parseISO","month","parseInt","getMonth","String","getYear","slice","validate","classes","makeStyles","input","fontWeight","borderBottom","borderBottomColor","useStyles","DatePickerStyledInputWrapper","InputLabel","Input","readOnly","PaymentForm","mutators","clearCardNumber","args","utils","changeValue","clearCardName","form","handleSubmit","submitting","pristine","align","spacing","sm","Card","direction","name","parse","render","meta","FormControl","htmlFor","inputProps","minLength","maxLength","endAdornment","InputAdornment","required","touched","error","DateFnsUtils","DatePicker","format","views","TextFieldComponent","textAlign","marginTop","opacity","onMouseDown","reset","ProfilePage","LoginForm","isRegForm","email","password","surname","loginLabelText","formMainClass","headerText","linkWrapperText","linkBtnText","LoginFormContainer","clearEmail","clearName","clearSurname","clearPassword","PageList","signup","LogoutLayout","LoginPage","SignupPage","PrivateRoute","redirectPath","rest","Router","mapPath","loginPath","signupPath","exact","App","baseUrl","env","headers","TRANSPORT_ERROR_MSG","request","fetch","method","body","JSON","stringify","then","response","json","reg","setCard","fetchCard","fetchAddressList","fetchRoute","handleAuthorization","handleRegistration","success","put","message","handleGettingCard","handleSettingCard","handleFetchingAddressList","handleFetchingRoute","addresses","sort","rootSaga","takeLatest","sagaMiddleware","createSagaMiddleware","createAppStore","initialState","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","noop","subscribe","setItem","setLocalStorageState","getState","run","getLocalStorageState","ReactDOM","theme","getElementById"],"mappings":"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","file":"static/js/main.57bc2e02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_light.c5c72fa9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo_dark.3ed311ad.svg\";","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport logoLight from '../../assets/img/logo_light.svg';\r\nimport logoDark from '../../assets/img/logo_dark.svg';\r\n\r\nclass Logo extends Component {\r\n    static defaultProps = {\r\n        type: \"dark\"\r\n    };\r\n\r\n    static propTypes = {\r\n        type: PropTypes.string,\r\n    };\r\n\r\n    render() {\r\n        let {type} = this.props;\r\n        let path = logoLight;\r\n\r\n        if (type === 'dark') {\r\n            path = logoDark;\r\n        }\r\n\r\n        return (\r\n            <img alt=\"logo\" data-testid=\"logo-component\" className=\"logo\" src={path}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logo;\r\n","import Logo from './logo';\r\n\r\nexport default Logo;","import {createAction} from 'redux-actions';\r\n\r\nexport const authRequest = createAction('LOFT-TAXI/AUTH/AUTH_REQUEST'); // логин\r\nexport const authSuccess = createAction('LOFT-TAXI/AUTH/SUCCESS'); // успешная авторизация\r\nexport const authFailure = createAction('LOFT-TAXI/AUTH/FAILURE'); // ошибка авторизации/регистрации\r\nexport const authLogout = createAction('LOFT-TAXI/AUTH/LOGOUT'); // разлогиниться\r\nexport const regRequest = createAction('LOFT-TAXI/AUTH/REG_REQUEST'); // регистрация\r\n","import {combineReducers} from 'redux';\r\nimport {handleActions} from 'redux-actions';\r\nimport {\r\n    authRequest, authSuccess, authFailure, authLogout,\r\n    regRequest\r\n} from './actions';\r\n\r\nconst defaultState = {\r\n    isLoading: false,\r\n    isAuthorized: false,\r\n    errors: null,\r\n    token: null,\r\n};\r\n\r\nconst isLoading = handleActions(\r\n    {\r\n        [authRequest]: () => true,\r\n        [authSuccess]: () => false,\r\n        [authFailure]: () => false,\r\n        [authLogout]: () => false,\r\n        [regRequest]: () => true,\r\n    },\r\n    defaultState.isLoading\r\n);\r\n\r\nconst isAuthorized = handleActions(\r\n    {\r\n        [authSuccess]: () => true,\r\n        [authFailure]: () => false,\r\n        [authLogout]: () => false,\r\n    },\r\n    defaultState.isAuthorized\r\n);\r\n\r\nconst errors = handleActions(\r\n    {\r\n        [authRequest]: () => null,\r\n        [authFailure]: (_state, action) => action.payload,\r\n        [authLogout]: () => null,\r\n        [regRequest]: () => null,\r\n    },\r\n    defaultState.errors\r\n);\r\n\r\nconst token = handleActions(\r\n    {\r\n        [authRequest]: () => null,\r\n        [authSuccess]: (_state, action) => action.payload,\r\n        [authFailure]: () => null,\r\n        [authLogout]: () => null,\r\n        [regRequest]: () => null,\r\n    },\r\n    defaultState.token\r\n);\r\n\r\nexport default combineReducers({\r\n    isLoading, isAuthorized, errors, token\r\n});\r\n","export const getIsLoading = state => state.auth.isLoading;\r\nexport const getIsAuthorized = state => state.auth.isAuthorized;\r\nexport const getToken = state => state.auth.token;\r\n","import {createAction} from 'redux-actions';\r\n\r\nexport const fetchCardRequest = createAction('LOFT-TAXI/FETCH_CARD_REQUEST');\r\nexport const setCardRequest = createAction('LOFT-TAXI/CARD/SET_CARD_REQUEST');\r\nexport const fetchCardSuccess = createAction('LOFT-TAXI/CARD/FETCH_CARD_SUCCESS');\r\nexport const setCardSuccess = createAction('LOFT-TAXI/CARD/SET_CARD_SUCCESS');\r\nexport const fetchCardFailure = createAction('LOFT-TAXI/CARD/FETCH_CARD_FAILURE');\r\nexport const setCardFailure = createAction('LOFT-TAXI/CARD/SET_CARD_FAILURE');\r\nexport const setProfileDefault = createAction('LOFT-TAXI/CARD/SET_PROFILE_DEFAULT');\r\n","import {\r\n    setCardRequest, setCardSuccess,\r\n    fetchCardRequest, fetchCardSuccess,\r\n    fetchCardFailure, setCardFailure,\r\n    setProfileDefault\r\n} from './actions';\r\nimport {combineReducers} from 'redux';\r\nimport {handleActions} from 'redux-actions';\r\n\r\nconst defaultState = {\r\n    isLoading: false,\r\n    isExist: false,\r\n    errors: null,\r\n    data: {}\r\n};\r\n\r\nconst isLoading = handleActions({\r\n        [setCardRequest]: () => true,\r\n        [setCardSuccess]: () => false,\r\n        [fetchCardRequest]: () => true,\r\n        [fetchCardSuccess]: () => false,\r\n        [setCardFailure]: () => false,\r\n        [fetchCardFailure]: () => false,\r\n        [setProfileDefault]: () => defaultState.isLoading,\r\n    },\r\n    defaultState.isLoading\r\n);\r\n\r\nconst isExist = handleActions({\r\n        [setCardRequest]: () => false,\r\n        [setCardSuccess]: () => true,\r\n        [fetchCardRequest]: () => false,\r\n        [fetchCardSuccess]: () => true,\r\n        [setCardFailure]: () => false,\r\n        [fetchCardFailure]: () => false,\r\n        [setProfileDefault]: () => defaultState.isExist,\r\n    },\r\n    defaultState.isExist\r\n);\r\n\r\nconst data = handleActions({\r\n        [setCardSuccess]: (_state, action) => action.payload,\r\n        [fetchCardSuccess]: (_state, action) => action.payload,\r\n        [setProfileDefault]: () => defaultState.data,\r\n\r\n    },\r\n    defaultState.data\r\n);\r\n\r\nconst errors = handleActions({\r\n        [setCardRequest]: () => null,\r\n        [setCardSuccess]: () => null,\r\n        [fetchCardRequest]: () => null,\r\n        [fetchCardSuccess]: () => null,\r\n        [setCardFailure]: (_state, action) => action.payload,\r\n        [fetchCardFailure]: (_state, action) => action.payload,\r\n        [setProfileDefault]: () => defaultState.errors,\r\n    },\r\n    defaultState.errors\r\n);\r\n\r\nexport default combineReducers({\r\n    isLoading, isExist, data, errors\r\n});\r\n","export const getIsLoading = state => state.card.isLoading;\r\nexport const getIsExist = state => state.card.isExist;\r\nexport const getData = state => state.card.data;\r\nexport const getErrors = state => state.card.errors;\r\n\r\n","import {createAction} from 'redux-actions';\r\n\r\nexport const fetchAddressListRequest = createAction('LOFT-TAXI/ROUTES/FETCH_ADDRESS_LIST_REQUEST');\r\nexport const fetchAddressListSuccess = createAction('LOFT-TAXI/ROUTES/FETCH_ADDRESS_LIST_SUCCESS');\r\nexport const fetchAddressListFailure = createAction('LOFT-TAXI/ROUTES/FETCH_ADDRESS_LIST_FAILURE');\r\nexport const fetchRouteRequest = createAction('LOFT-TAXI/ROUTES/FETCH_ROUTE_REQUEST');\r\nexport const fetchRouteSuccess = createAction('LOFT-TAXI/ROUTES/FETCH_ROUTE_SUCCESS');\r\nexport const fetchRouteFailure = createAction('LOFT-TAXI/ROUTES/FETCH_ROUTE_FAILURE');\r\nexport const cancelOrder = createAction('LOFT-TAXI/ROUTES/CANCEL_ORDER');\r\nexport const placeOrder = createAction('LOFT-TAXI/ROUTES/PLACE_ORDER');\r\nexport const setRoutesDefault = createAction('LOFT-TAXI/ROUTES/SET_ROUTES_DEFAULT');\r\n","import {combineReducers} from 'redux';\r\nimport {handleActions} from 'redux-actions';\r\nimport {\r\n    fetchAddressListRequest,\r\n    fetchAddressListSuccess,\r\n    fetchAddressListFailure,\r\n    fetchRouteRequest,\r\n    fetchRouteSuccess,\r\n    fetchRouteFailure,\r\n    cancelOrder,\r\n    placeOrder,\r\n    setRoutesDefault\r\n} from './actions';\r\n\r\n\r\nconst defaultState = {\r\n    addressList: [],\r\n    errors: null,\r\n    isBooked: false,\r\n    route: []\r\n};\r\n\r\nconst addressList = handleActions(\r\n    {\r\n        [fetchAddressListRequest]: () => [],\r\n        [fetchAddressListSuccess]: (_state, action) => action.payload,\r\n        [fetchAddressListFailure]: () => [],\r\n        [setRoutesDefault]: () => defaultState.addressList\r\n    },\r\n    defaultState.addressList\r\n);\r\n\r\nconst isBooked = handleActions(\r\n    {\r\n        [cancelOrder]: () => false,\r\n        [placeOrder]: () => true,\r\n        [setRoutesDefault]: () => defaultState.isBooked\r\n    },\r\n    defaultState.isBooked\r\n);\r\n\r\nconst route = handleActions(\r\n    {\r\n        [fetchRouteRequest]: () => [],\r\n        [fetchRouteSuccess]: (_state, action) => action.payload,\r\n        [fetchRouteFailure]: () => [],\r\n        [cancelOrder]: () => [],\r\n        [setRoutesDefault]: () => defaultState.route\r\n    },\r\n    defaultState.route\r\n);\r\n\r\nconst errors = handleActions(\r\n    {\r\n        [fetchAddressListRequest]: () => null,\r\n        [fetchAddressListSuccess]: () => null,\r\n        [fetchAddressListFailure]: (_state, action) => action.payload,\r\n        [fetchRouteRequest]: () => null,\r\n        [fetchRouteSuccess]: () => null,\r\n        [fetchRouteFailure]: (_state, action) => action.payload,\r\n        [setRoutesDefault]: () => defaultState.errors\r\n    },\r\n    defaultState.errors\r\n);\r\n\r\n\r\nexport default combineReducers({\r\n    addressList, isBooked, errors, route\r\n});\r\n","export const getAddressList = state => state.routes.addressList;\r\nexport const getIsBooked = state => state.routes.isBooked;\r\nexport const getRoute = state => state.routes.route;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Logo from '../logo';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/ToolBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport pageList from \"../../appData/pageList\";\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {authLogout} from \"../../modules/auth\";\r\nimport {setProfileDefault} from \"../../modules/card\";\r\nimport {setRoutesDefault} from \"../../modules/routes\";\r\nimport {cleanLocalStorageState} from '../../helpers/localStorage';\r\n\r\nimport './header.scss';\r\n\r\nexport const Header = ({currentPage, authLogout, setProfileDefault}) => {\r\n    Header.propTypes = {\r\n        currentPage: PropTypes.string.isRequired\r\n    };\r\n\r\n    const menuClickHandler = (event) => {\r\n        let {target} = event;\r\n        let pageId = target.dataset.pageId;\r\n\r\n        if (pageId === pageList.login.id) {\r\n            authLogout();\r\n            setProfileDefault();\r\n            setRoutesDefault();\r\n            cleanLocalStorageState();\r\n        }\r\n    };\r\n\r\n    const menu = Object.values(pageList).map(page => {\r\n        if (!page.isNotInMenu) {\r\n            let pageId = page.id;\r\n\r\n            return (\r\n                <li key={pageId} className={pageId === currentPage ? 'active' : ''}>\r\n                    <Link to={page.path} onClick={menuClickHandler} data-page-id={pageId}>\r\n                        {page.title}\r\n                    </Link>\r\n                </li>\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <AppBar data-testid=\"header\" position=\"static\" color=\"transparent\" className=\"header\">\r\n            <ToolBar>\r\n                <Typography className=\"logo_wrapper\">\r\n                    <Logo type=\"dark\"/>\r\n                </Typography>\r\n                <div className=\"top_menu_wrapper\">\r\n                    <ul className=\"header_menu\">\r\n                        {menu}\r\n                    </ul>\r\n                </div>\r\n            </ToolBar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n        isAuthorized: state.auth.isAuthorized,\r\n    }\r\n);\r\n\r\nconst mapDispatchToProps = {authLogout, setProfileDefault};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import Header from './header';\r\n\r\nexport default Header;\r\n","const STORE_ITEM = 'store';\r\n\r\nexport const getLocalStorageState = () => {\r\n    if (localStorage.length) {\r\n        let store = localStorage.getItem(STORE_ITEM);\r\n\r\n        if (store) {\r\n            return JSON.parse(store);\r\n        }\r\n    }\r\n\r\n    return {};\r\n};\r\n\r\nexport const setLocalStorageState = (store) => {\r\n    return localStorage.setItem(STORE_ITEM, JSON.stringify(store));\r\n};\r\n\r\nexport const cleanLocalStorageState = () => {\r\n    if (localStorage.length) {\r\n        let store = localStorage.getItem(STORE_ITEM);\r\n\r\n        if (store) {\r\n            return localStorage.removeItem(STORE_ITEM);\r\n        }\r\n    }\r\n};\r\n","import MainLayout from './main';\r\n\r\nexport default MainLayout;","import React from 'react';\r\nimport Header from '../../components/header';\r\nimport './main.scss';\r\n\r\nconst MainLayout = ({children, pageId, className}) => {\r\n    return (\r\n        <div data-testid=\"main-layout\" className={`main_wrapper ${className}_page_wrapper`}>\r\n            <Header currentPage={pageId} />\r\n            <div className='main_content'>\r\n                <div className={`content ${className}_content wrapper`}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainLayout;\r\n","export default {\r\n    \"MAPBOX_ACCESS_TOKEN\": \"pk.eyJ1IjoibnVrYW50cmkiLCJhIjoiY2s4cW0yMHV4MDEwbzNmbnU0N2h1dm91byJ9.wVrxMygqN2Nfe5rt4fdUAw\",\r\n    \"LOFT_TAXI_API_URL\": \"https://loft-taxi.glitch.me/\"\r\n};","import MapBox from './mapbox';\r\n\r\nexport default MapBox;","import React, {useEffect, useRef, useState} from 'react';\r\nimport ENV from \"../../appData/env\";\r\nimport MapBoxGL from \"mapbox-gl\";\r\nimport './mapbox.scss';\r\n\r\nconst LAYER_ID = 'route';\r\n\r\nconst MapBox = ({route, isBooked}) => {\r\n    const [map, setMap] = useState(null);\r\n    const mapContainer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const initializeMap = ({setMap, mapContainer}) => {\r\n            const map = new MapBoxGL.Map({\r\n                accessToken: ENV.MAPBOX_ACCESS_TOKEN,\r\n                container: mapContainer.current,\r\n                style: \"mapbox://styles/mapbox/light-v10\",\r\n                center: [30.349351, 59.9976819],\r\n                zoom: 12\r\n            });\r\n\r\n            map.on(\"load\", () => {\r\n                setMap(map);\r\n                map.resize();\r\n            });\r\n        };\r\n\r\n        if (!map) initializeMap({setMap, mapContainer});\r\n    }, [map]);\r\n\r\n    useEffect(() => {\r\n        if (!!map && !!route.length) {\r\n            if (!!checkLayerExist(LAYER_ID)) {\r\n                layerRemove(LAYER_ID);\r\n                markersClear();\r\n            }\r\n\r\n            drawRoute(map, route);\r\n        }\r\n\r\n    }, [route]);\r\n\r\n    useEffect(() => {\r\n        if (!!checkLayerExist(LAYER_ID) && !isBooked) {\r\n            layerRemove(LAYER_ID);\r\n            markersClear();\r\n        }\r\n    }, [isBooked]);\r\n\r\n    const layerRemove = (layerId) => {\r\n        map.removeLayer(layerId).removeSource(layerId);\r\n    };\r\n\r\n    const markersClear = () => {\r\n        const markers = document.querySelectorAll('.marker');\r\n\r\n        [].forEach.call(markers, (marker) => {\r\n            marker.remove();\r\n        });\r\n    };\r\n\r\n    const checkLayerExist = (layerId) => {\r\n        if (!!map) {\r\n            return typeof map.getLayer(layerId) !== 'undefined';\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const drawRoute = (map, coordinates) => {\r\n        map.flyTo({\r\n            center: coordinates[0],\r\n            zoom: 12\r\n        });\r\n\r\n        map.addLayer({\r\n            id: LAYER_ID,\r\n            type: \"line\",\r\n            source: {\r\n                type: \"geojson\",\r\n                data: {\r\n                    type: \"Feature\",\r\n                    properties: {},\r\n                    geometry: {\r\n                        type: \"LineString\",\r\n                        coordinates\r\n                    }\r\n                }\r\n            },\r\n            layout: {\r\n                \"line-join\": \"round\",\r\n                \"line-cap\": \"round\"\r\n            },\r\n            paint: {\r\n                \"line-color\": \"#ffc617\",\r\n                \"line-width\": 8\r\n            }\r\n        });\r\n\r\n        drawMarks(coordinates[0], [...coordinates].pop());\r\n    };\r\n\r\n    const drawMarks = (coordsStart, coordsEnd) => {\r\n        const markerStart = document.createElement('div');\r\n        markerStart.className = 'marker start';\r\n        new MapBoxGL.Marker(markerStart)\r\n            .setLngLat(coordsStart)\r\n            .addTo(map);\r\n\r\n        const markerEnd = document.createElement('div');\r\n        markerEnd.className = 'marker end';\r\n        new MapBoxGL.Marker(markerEnd)\r\n            .setLngLat(coordsEnd)\r\n            .addTo(map);\r\n    };\r\n\r\n    return (\r\n        <div ref={mapContainer} className=\"mapbox_container\" data-testid=\"mapBox\"/>\r\n    );\r\n};\r\n\r\nexport default MapBox;\r\n","import IsBookedMessage from './isBookedMessage';\r\n\r\nexport default IsBookedMessage;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport './isBookedMessage.scss';\r\n\r\nconst IsBookedMessage = ({cancelOrder}) => {\r\n    return (\r\n        <div className=\"is_booked_message\" data-testid=\"isBookedMessage\">\r\n            <Typography variant=\"h4\" component=\"h1\">\r\n                Заказ размещён\r\n            </Typography>\r\n            <Typography component=\"p\">\r\n                Ваше такси уже едет к вам. Прибудет приблизительно через 10 минут.\r\n            </Typography>\r\n            <Button className=\"btn\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={cancelOrder}>\r\n                Сделать новый заказ\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IsBookedMessage;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {cancelOrder, fetchAddressListRequest, fetchRouteRequest} from '../../../modules/routes';\r\nimport {getAddressList, getIsBooked, getRoute} from \"../../../modules/routes/selectors\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IsBookedMessage from './IsBookedMessage'\r\nimport './orderForm.scss';\r\n\r\nconst OrderForm = ({route, fetchAddressListRequest, fetchRouteRequest, makeOrder, cancelOrder, addressListDefault, isBooked}) => {\r\n    const [from, setFrom] = useState('');\r\n    const [to, setTo] = useState('');\r\n\r\n    const [addressList, setAddressList] = useState(addressListDefault);\r\n    const [canOrder, setCanOrder] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!addressListDefault.length) {\r\n            fetchAddressListRequest();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const addressList = addressListDefault.filter((address) => {\r\n            return address !== from && address !== to\r\n        });\r\n\r\n        setCanOrder(!!(from && to));\r\n        setAddressList(addressList);\r\n    }, [from, to]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setDefaultOrderFormState();\r\n        }\r\n    }, []);\r\n\r\n    const onFormSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (canOrder && !!from && !!to) {\r\n            return fetchRouteRequest({\r\n                addressFrom: from,\r\n                addressTo: to\r\n            });\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const onFromChangeHanlder = (event, newValue) => {\r\n        return setFrom(newValue);\r\n    };\r\n\r\n    const onToChangeHanlder = (event, newValue) => {\r\n        return setTo(newValue);\r\n    };\r\n\r\n    const onCancelOrderHandler = () => {\r\n        setDefaultOrderFormState();\r\n    };\r\n\r\n    const setDefaultOrderFormState = () => {\r\n        setFrom('');\r\n        setTo('');\r\n        setAddressList(addressListDefault);\r\n        cancelOrder();\r\n    };\r\n\r\n    return (\r\n        <Grid container className=\"order_form_wrapper\">\r\n            <Paper className=\"order_form_container\">\r\n                {isBooked ? <IsBookedMessage cancelOrder={onCancelOrderHandler}/> :\r\n                    <form onSubmit={onFormSubmitHandler} data-testid=\"orderForm\">\r\n                        <Grid container>\r\n                            <Grid container className=\"inputs_area\">\r\n                                <Grid item xs={12}>\r\n                                    <Autocomplete\r\n                                        id=\"routeFrom\"\r\n                                        className=\"routeFrom\"\r\n                                        options={addressList}\r\n                                        onChange={(event, newValue) => {\r\n                                            onFromChangeHanlder(event, newValue);\r\n                                        }}\r\n                                        getOptionSelected={(option) => option}\r\n                                        renderInput={(params) => <TextField {...params} label=\"Откуда\"\r\n                                                                            margin=\"normal\"/>}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Autocomplete\r\n                                        id=\"routeTo\"\r\n                                        className=\"routeTo\"\r\n                                        options={addressList}\r\n                                        onChange={(event, newValue) => {\r\n                                            onToChangeHanlder(event, newValue);\r\n                                        }}\r\n                                        getOptionSelected={(option) => option}\r\n                                        renderInput={(params) => <TextField {...params} label=\"Куда\" margin=\"normal\"/>}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Button className=\"btn\"\r\n                                        disabled={!canOrder}\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        fullWidth\r\n                                        color=\"primary\">\r\n                                    Вызвать такси\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                }\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    addressListDefault: getAddressList(state),\r\n    isBooked: getIsBooked(state),\r\n    route: getRoute(state)\r\n});\r\n\r\nconst mapDispatchToProps = {fetchAddressListRequest, fetchRouteRequest, cancelOrder};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderForm);\r\n","import OrderForm from './orderForm';\r\n\r\nexport default OrderForm;","import EmptyProfileModal from './emptyProfileModal';\r\n\r\nexport default EmptyProfileModal;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport pageList from \"../../../appData/pageList\";\r\nimport './emptyProfileModal.scss';\r\n\r\nconst EmptyProfileModal = ({profileIsLoading}) => {\r\n    return (\r\n        <div data-testid=\"emptyProfileModal\">\r\n            {!profileIsLoading &&\r\n            <Paper className=\"empty_profile_message overlay\" elevation={2}>\r\n                <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\" component=\"h1\">\r\n                            Заполните платежные данные\r\n                        </Typography>\r\n                        <Typography component=\"p\">\r\n                            Чтобы заказать машину - введите данные платёжной карты на странице профиля.\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button className=\"btn\"\r\n                                component={Link}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                to={pageList.profile.path}\r\n                        >\r\n                            Перейти в профиль\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmptyProfileModal;","import MapPage from './map';\r\n\r\nexport default MapPage;","import React from 'react';\r\nimport pageList from '../../appData/pageList';\r\nimport MainLayout from '../../layouts/main';\r\nimport MapBox from '../../components/mapbox';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {getIsExist, getIsLoading} from '../../modules/card';\r\nimport {getIsBooked, getRoute} from '../../modules/routes';\r\nimport {connect} from 'react-redux';\r\nimport OrderForm from './OrderForm';\r\nimport EmptyProfileModal from './EmptyProfileModal';\r\nimport './map.scss';\r\n\r\n\r\nconst MapPage = ({profileIsLoading, profileIsChecked, isBooked, route}) => {\r\n    const pageId = pageList.map.id;\r\n\r\n    return (\r\n        <MainLayout pageId={pageId} className={pageId}>\r\n            <div data-testid=\"mapPage\">\r\n                <MapBox isBooked={isBooked} route={route}/>\r\n                <Grid container className=\"order_wrapper wrapper\">\r\n                    {\r\n                        profileIsChecked ?\r\n                            <OrderForm/> :\r\n                            <EmptyProfileModal profileIsLoading={profileIsLoading}/>\r\n                    }\r\n                </Grid>\r\n            </div>\r\n        </MainLayout>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    profileIsChecked: getIsExist(state),\r\n    profileIsLoading: getIsLoading(state),\r\n    isBooked: getIsBooked(state),\r\n    route: getRoute(state)\r\n});\r\n\r\nexport default connect(mapStateToProps)(MapPage);\r\n","import React from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst ClearIcon = ({onClick}) => {\r\n    return (\r\n        <div data-testid=\"clearIcon\" className=\"clear_icon_wrapper icon_wrapper\" onClick={onClick} style={{cursor: \"pointer\"}}>\r\n            <CloseIcon style={{fontSize: 24, color: \"#ffb1b1\"}}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ClearIcon;\r\n","import ClearIcon from './clearIcon';\r\n\r\nexport default ClearIcon;","import HelpIcon from './helpIcon';\r\n\r\nexport default HelpIcon;","import React from 'react';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\nconst HelpIcon = () => {\r\n    return (\r\n        <div className=\"help_icon icon_wrapper\" data-testid=\"helpIcon\"\r\n             style={{marginLeft: \"5px\", cursor: \"pointer\"}}>\r\n            <HelpOutlineIcon style={{fontSize: 18, color: \"#747474\"}}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HelpIcon;\r\n","import TooltipDefault from './tooltipDefault';\r\n\r\nexport default TooltipDefault;","import React from 'react';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst TooltipDefault = withStyles(() => ({\r\n    tooltip: {\r\n        backgroundColor: '#fff',\r\n        color: '#323232',\r\n        border: '1px solid #999',\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        width: \"194px\",\r\n        height: \"55px\",\r\n        position: \"relative\"\r\n    },\r\n}))(Tooltip);\r\n\r\nexport default TooltipDefault;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from '@material-ui/core/Card';\r\nimport {fetchCardRequest, setCardRequest, getIsLoading, getIsExist, getData} from '../../../modules/card';\r\nimport {getToken} from \"../../../modules/auth\";\r\nimport {connect} from 'react-redux';\r\nimport {Form, Field} from 'react-final-form';\r\nimport formatString from \"format-string-by-pattern\";\r\nimport ClearIcon from \"../clearIcon\";\r\nimport HelpIcon from './helpIcon';\r\nimport {MuiPickersUtilsProvider, DatePicker} from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport parseISO from 'date-fns/parseISO';\r\nimport TooltipDefault from \"./tooltipDefault\";\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport './profileForm.scss';\r\n\r\nconst ProfileForm = ({isExist, card, token, isLoading, fetchCardRequest, setCardRequest}) => {\r\n    const rootClass = \"form_profile\";\r\n    const [showPassword, setShowPassword] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (!isExist) {\r\n            fetchCardRequest({token});\r\n        }\r\n    }, []);\r\n\r\n    const initialValues = {\r\n        cardNumber: card.cardNumber,\r\n        expiryDate: card.expiryDate || new Date(),\r\n        cardName: card.cardName,\r\n        cvc: card.cvc\r\n    };\r\n\r\n    const masks = {\r\n        cardNumber: \"9999 9999 9999 9999\",\r\n        cvc: \"999\"\r\n    };\r\n\r\n    const formatCardNumber = value => {\r\n        const onlyNumbers = value.replace(/[^\\d]/g, '');\r\n        return formatString(masks.cardNumber, onlyNumbers);\r\n    };\r\n\r\n    const formatCvc = value => {\r\n        const onlyNumbers = value.replace(/[^\\d]/g, '');\r\n        return formatString(masks.cvc, onlyNumbers);\r\n    };\r\n\r\n    const formatCardName = value => {\r\n        return value.replace(/[\\d!@#$%^&*()_]/g, '');\r\n    };\r\n\r\n    const onSubmit = values => {\r\n        return setCardRequest({\r\n            ...values, token\r\n        });\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        return setShowPassword(!showPassword);\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const formatDate = (date) => {\r\n        if (typeof date === \"string\") {\r\n            date = parseISO(date);\r\n        }\r\n\r\n        let month = parseInt(date.getMonth()) + 1;\r\n        month = month > 10 ? month : '0' + month;\r\n\r\n        let year = String(date.getYear()).slice(-2);\r\n\r\n        return month + '/' + year;\r\n    };\r\n\r\n    const validate = (values) => {\r\n        const errors = {};\r\n        const cardNumber = values.cardNumber;\r\n        const cvc = values.cvc;\r\n\r\n        if (!cardNumber) {\r\n            errors.cardNumber = \"Заполните обязательное поле «Номер карты»\";\r\n        } else if (cardNumber.length !== 19) {\r\n            errors.cardNumber = \"«Номер карты» должен состоять из 16 цифр\";\r\n        }\r\n\r\n        if (!values.cardName) {\r\n            errors.cardName = \"Заполните обязательное поле «Имя владельца»\";\r\n        }\r\n\r\n        if (!values.cvc) {\r\n            errors.cvc = \"Заполните обязательное поле «CVC»\";\r\n        } else if (cvc.length !== 3) {\r\n            errors.cvc = \"«CVC» должен состоять из 3 цифр\";\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    const useStyles = makeStyles(() => ({\r\n        input: {\r\n            fontSize: \"24px\",\r\n            fontWeight: \"300\",\r\n            borderBottom: \"1px solid rgba(234, 234, 234, .4)\",\r\n            '&:hover': {\r\n                '&:not(.Mui-disabled)': {\r\n                    '&:before': {\r\n                        borderBottom: \"1px solid rgba(234, 234, 234, 1)\",\r\n                    },\r\n                }\r\n            },\r\n            '&:before': {\r\n                borderBottomColor: \"rgba(234, 234, 234, .4)\",\r\n            },\r\n            '&:after': {\r\n                borderBottomColor: \"rgba(234, 234, 234, .4)\",\r\n            }\r\n        }\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const DatePickerStyledInputWrapper = ({value, onClick}) => {\r\n        return (\r\n            <>\r\n                <InputLabel style={{fontSize: \"12px\"}} className={`${rootClass}_label`}>\r\n                    Срок дейстия:\r\n                </InputLabel>\r\n                <Input\r\n                       data-testid=\"expiryDate\"\r\n                       className={classes.input}\r\n                       type=\"text\"\r\n                       readOnly\r\n                       value={value}\r\n                       onClick={onClick}\r\n                />\r\n            </>\r\n        );\r\n    };\r\n\r\n    const PaymentForm = () => (\r\n        <Form onSubmit={onSubmit}\r\n              initialValues={initialValues}\r\n              validate={validate}\r\n              mutators={{\r\n                  clearCardNumber: (args, state, utils) => {\r\n                      utils.changeValue(state, 'cardNumber', () => undefined)\r\n                  },\r\n                  clearCardName: (args, state, utils) => {\r\n                      utils.changeValue(state, 'cardName', () => undefined)\r\n                  },\r\n              }}\r\n        >\r\n            {({form, handleSubmit, submitting, pristine}) => (\r\n                <form className={`${rootClass} form_wrapper`} onSubmit={handleSubmit} data-testid=\"profileForm\" >\r\n                    <Grid container align=\"center\">\r\n                        <Grid item xs={12} className={`${rootClass}_header`}>\r\n                            <Typography variant=\"h4\" component=\"h1\">\r\n                                Профиль\r\n                            </Typography>\r\n                            <Typography component=\"p\">\r\n                                Способ оплаты\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container className=\"cards_row\" justify=\"center\" spacing={4}>\r\n                        <Grid item sm={6}>\r\n                            <Card className=\"card bg_icon\">\r\n                                <Grid container direction=\"column\" justify=\"space-around\" className=\"card_col\">\r\n                                    {!isLoading &&\r\n                                    <Field\r\n                                        name=\"cardNumber\"\r\n                                        parse={formatCardNumber}\r\n                                        render={({input, meta}) => (\r\n                                            <FormControl fullWidth={true} className=\"form_control\">\r\n                                                <InputLabel className={`${rootClass}_label`}\r\n                                                            htmlFor=\"cardNumber\">\r\n                                                    Номер карты:\r\n                                                </InputLabel>\r\n                                                <Input className={`${rootClass}_input`}\r\n                                                       data-testid=\"cardNumber\"\r\n                                                       id=\"cardNumber\" {...input}\r\n                                                       inputProps={{minLength: \"19\", maxLength: \"19\"}}\r\n                                                       endAdornment={input.value.length >= 1 &&\r\n                                                       <InputAdornment position=\"end\">\r\n                                                           <ClearIcon\r\n                                                               onClick={form.mutators.clearCardNumber}/>\r\n                                                       </InputAdornment>\r\n                                                       } required/>\r\n                                                {meta.touched && meta.error &&\r\n                                                <span\r\n                                                    className=\"validation_error\">{meta.error}</span>}\r\n                                            </FormControl>\r\n                                        )}\r\n                                    />}\r\n                                    {!isLoading &&\r\n                                    <Field\r\n                                        name=\"expiryDate\"\r\n                                        render={({input}) => (\r\n                                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                                <DatePicker\r\n                                                    format=\"MM/yy\"\r\n                                                    views={[\"month\", \"year\"]} {...input}\r\n                                                    TextFieldComponent={\r\n                                                        ({onClick}) =>\r\n                                                            <DatePickerStyledInputWrapper\r\n                                                                value={formatDate(input.value)}\r\n                                                                onClick={onClick}\r\n                                                            />\r\n                                                    }\r\n                                                />\r\n                                            </MuiPickersUtilsProvider>\r\n                                        )}\r\n                                    />}\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={6}>\r\n                            <Card className=\"card\">\r\n                                <Grid container direction=\"column\" justify=\"space-around\" className=\"card_col\">\r\n                                    {!isLoading &&\r\n                                    <Field\r\n                                        name=\"cardName\"\r\n                                        parse={formatCardName}\r\n                                        render={({input, meta}) => (\r\n                                            <FormControl fullWidth={true} className=\"form_control\">\r\n                                                <InputLabel className={`${rootClass}_label`}\r\n                                                            htmlFor=\"cardName\">\r\n                                                    Имя владельца:\r\n                                                </InputLabel>\r\n                                                <Input\r\n                                                       data-testid=\"cardName\"\r\n                                                       className={`${rootClass}_input`}\r\n                                                       id=\"cardName\" {...input}\r\n                                                       inputProps={{maxLength: \"20\"}}\r\n                                                       endAdornment={input.value.length >= 1 &&\r\n                                                       <InputAdornment position=\"end\">\r\n                                                           <ClearIcon\r\n                                                               onClick={form.mutators.clearCardName}/>\r\n                                                       </InputAdornment>\r\n                                                       } required/>\r\n                                                {meta.touched && meta.error &&\r\n                                                <span\r\n                                                    className=\"validation_error\">{meta.error}</span>}\r\n                                            </FormControl>\r\n                                        )}\r\n                                    />}\r\n                                    {!isLoading &&\r\n                                    <Field\r\n                                        name=\"cvc\"\r\n                                        parse={formatCvc}\r\n                                        render={({input, meta}) => (\r\n                                            <FormControl fullWidth={true}\r\n                                                         className=\"form_control cvc_wrapper\">\r\n                                                <InputLabel className={`${rootClass}_label`}\r\n                                                            htmlFor=\"cvc\">\r\n                                                    CVC:\r\n                                                    <TooltipDefault\r\n                                                        title={\r\n                                                            <>\r\n                                                                <span className=\"popperArrow\"/>\r\n                                                                <Typography component=\"p\" style={{\r\n                                                                    textAlign: \"center\",\r\n                                                                    fontSize: \"10px\",\r\n                                                                }}>\r\n                                                                    3 последние цифры<br/> на\r\n                                                                    оборотной\r\n                                                                    стороне карты</Typography>\r\n                                                            </>\r\n                                                        }\r\n                                                    >\r\n                                                            <span style={{marginTop: \"-3px\"}}>\r\n                                                              <HelpIcon/>\r\n                                                            </span>\r\n                                                    </TooltipDefault>\r\n                                                </InputLabel>\r\n                                                <Input data-testid=\"cvc\"\r\n                                                       className={`${rootClass}_input`} id=\"cvc\"\r\n                                                       inputProps={{minLength: \"3\"}} {...input}\r\n                                                       type={showPassword ? 'password' : 'text'}\r\n                                                       endAdornment={\r\n                                                           <InputAdornment position=\"end\">\r\n                                                               <div style={{\r\n                                                                   opacity: 0.5,\r\n                                                                   cursor: \"pointer\"\r\n                                                               }}\r\n                                                                    onClick={handleClickShowPassword}\r\n                                                                    onMouseDown={handleMouseDownPassword}\r\n                                                               >\r\n                                                                   {showPassword ? <VisibilityOff/> :\r\n                                                                       <Visibility/>}\r\n                                                               </div>\r\n                                                           </InputAdornment>}\r\n                                                       required/>\r\n                                                {meta.touched && meta.error &&\r\n                                                <span\r\n                                                    className=\"validation_error\">{meta.error}</span>}\r\n                                            </FormControl>\r\n                                        )}\r\n                                    />}\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} align=\"center\" className=\"form_footer\">\r\n                        <Button className=\"btn\"\r\n                                disabled={isLoading}\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\">\r\n                            Сохранить\r\n                        </Button>\r\n                        <Button className=\"btn\"\r\n                                disabled={submitting || pristine}\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                onClick={form.reset}\r\n                        >\r\n                            Отменить\r\n                        </Button>\r\n                    </Grid>\r\n                </form>\r\n            )}\r\n        </Form>\r\n    );\r\n\r\n    return (\r\n        <PaymentForm/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: getIsLoading(state),\r\n    isExist: getIsExist(state),\r\n    card: getData(state),\r\n    token: getToken(state)\r\n});\r\n\r\nconst mapDispatchToProps = {setCardRequest, fetchCardRequest};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileForm);\r\n","import ProfileForm from './profileForm';\r\n\r\nexport default ProfileForm;","import ProfilePage from './profile';\r\n\r\nexport default ProfilePage;","import React from 'react';\r\nimport pageList from '../../appData/pageList';\r\nimport MainLayout from '../../layouts/main';\r\nimport ProfileForm from '../../components/Forms/profileForm';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport './profile.scss';\r\n\r\nconst ProfilePage = () => {\r\n    const pageId = pageList.profile.id;\r\n\r\n    return (\r\n        <MainLayout className={pageId} pageId={pageId}>\r\n            <Grid container\r\n                  justify=\"center\"\r\n                  alignItems=\"center\"\r\n            >\r\n                <Grid item sm={10}>\r\n                    <Paper className=\"paper_container\">\r\n                        <ProfileForm/>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </MainLayout>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Link} from 'react-router-dom';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PageList from \"../../../appData/pageList\";\r\nimport {connect} from 'react-redux';\r\nimport {authRequest, getIsLoading, regRequest} from \"../../../modules/auth\";\r\nimport {Form, Field} from 'react-final-form';\r\nimport './loginForm.scss';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport ClearIcon from \"../clearIcon/clearIcon\";\r\n\r\n\r\nconst LoginForm = ({isRegForm = false, authRequest, regRequest, isLoading}) => {\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n        name: '',\r\n        surname: ''\r\n    };\r\n\r\n    const onSubmit = values => {\r\n        const email = values.email;\r\n        const password = values.password;\r\n        const name = values.name;\r\n        const surname = values.surname;\r\n\r\n        if (!isRegForm) {\r\n            return authRequest({email, password});\r\n        } else if (isRegForm) {\r\n            return regRequest({email, password, name, surname});\r\n        }\r\n    };\r\n\r\n    const validate = values => {\r\n        const errors = {};\r\n\r\n        if (!values.email) {\r\n            errors.email = `Заполните обязательное поле «${loginLabelText}»`;\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = \"Заполните обязательное поле «Пароль»\";\r\n        }\r\n\r\n        if (isRegForm) {\r\n            if (!values.name) {\r\n                errors.name = \"Заполните обязательное поле «Имя»\";\r\n            }\r\n\r\n            if (!values.surname) {\r\n                errors.surname = \"Заполните обязательное поле «Фамилия»\";\r\n            }\r\n        }\r\n\r\n        return errors;\r\n    };\r\n\r\n    let formMainClass = isRegForm ? 'form_signup' : 'form_login';\r\n    let headerText = isRegForm ? 'Регистрация' : 'Войти';\r\n    let linkWrapperText = isRegForm ? 'Уже зарегистрированы?' : 'Новый пользователь?';\r\n    let linkBtnText = isRegForm ? ' Войти' : ' Зарегистрируйтесь';\r\n    let loginLabelText = isRegForm ? 'Адрес электронной почты' : 'Имя пользователя';\r\n\r\n    const LoginFormContainer = () => (\r\n        <Form onSubmit={onSubmit}\r\n              initialValues={initialValues}\r\n              validate={validate}\r\n              mutators={{\r\n                  clearEmail: (args, state, utils) => {\r\n                      utils.changeValue(state, 'email', () => undefined)\r\n                  },\r\n                  clearName: (args, state, utils) => {\r\n                      utils.changeValue(state, 'name', () => undefined)\r\n                  },\r\n                  clearSurname: (args, state, utils) => {\r\n                      utils.changeValue(state, 'surname', () => undefined)\r\n                  },\r\n                  clearPassword: (args, state, utils) => {\r\n                      utils.changeValue(state, 'password', () => undefined)\r\n                  },\r\n              }}\r\n        >\r\n            {({form, handleSubmit, submitting}) => (\r\n                <form className={`form ${formMainClass}`} id=\"loft_taxi_form\" data-testid=\"authForm\" onSubmit={handleSubmit}>\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\" component=\"h1\">\r\n                                {headerText}\r\n                            </Typography>\r\n                            <Typography component=\"p\">\r\n                                {linkWrapperText}\r\n                                <Link to={!isRegForm ? PageList.signup.path : PageList.login.path}\r\n                                      data-testid=\"change-form-page-link\"\r\n                                      data-page-id={!isRegForm ? PageList.signup.id : PageList.login.id}>\r\n                                    {linkBtnText}\r\n                                </Link>\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Field name=\"email\" render={({input, meta}) => (\r\n                                <FormControl fullWidth={true} className=\"form_control\">\r\n                                    <InputLabel htmlFor=\"email\">\r\n                                        {loginLabelText}\r\n                                    </InputLabel>\r\n                                    <Input id=\"email\" {...input} data-testid=\"login-input\"\r\n                                           endAdornment={input.value.length >= 1 &&\r\n                                           <InputAdornment position=\"end\">\r\n                                               <ClearIcon onClick={form.mutators.clearEmail}/>\r\n                                           </InputAdornment>\r\n                                           } required/>\r\n                                    {meta.touched && meta.error &&\r\n                                    <span className=\"validation_error\">{meta.error}</span>}\r\n                                </FormControl>\r\n                            )}/>\r\n                        </Grid>\r\n\r\n                        {isRegForm &&\r\n                        <Grid container spacing={2}>\r\n                            <Grid item sm={6}>\r\n                                <Field name=\"name\" render={({input, meta}) => (\r\n                                    <FormControl fullWidth={true} className=\"form_control\">\r\n                                        <InputLabel htmlFor=\"name\">\r\n                                            Имя\r\n                                        </InputLabel>\r\n                                        <Input id=\"name\" {...input} data-testid=\"name-input\"\r\n                                               endAdornment={input.value.length >= 1 &&\r\n                                        <InputAdornment position=\"end\">\r\n                                            <ClearIcon onClick={form.mutators.clearName}/>\r\n                                        </InputAdornment>\r\n                                        } required/>\r\n                                        {meta.touched && meta.error &&\r\n                                        <span className=\"validation_error\">{meta.error}</span>}\r\n                                    </FormControl>\r\n                                )}/>\r\n                            </Grid>\r\n                            <Grid item sm={6}>\r\n                                <Field name=\"surname\" render={({input, meta}) => (\r\n                                    <FormControl fullWidth={true} className=\"form_control\">\r\n                                        <InputLabel htmlFor=\"surname\">\r\n                                            Фамилия\r\n                                        </InputLabel>\r\n                                        <Input id=\"surname\" {...input} data-testid=\"surname-input\"\r\n                                               endAdornment={input.value.length >= 1 &&\r\n                                        <InputAdornment position=\"end\">\r\n                                            <ClearIcon onClick={form.mutators.clearSurname}/>\r\n                                        </InputAdornment>\r\n                                        } required/>\r\n                                        {meta.touched && meta.error &&\r\n                                        <span className=\"validation_error\">{meta.error}</span>}\r\n                                    </FormControl>\r\n                                )}/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        }\r\n\r\n                        <Grid item xs={12}>\r\n                            <Field name=\"password\" render={({input, meta}) => (\r\n                                <FormControl fullWidth={true} className=\"form_control\">\r\n                                    <InputLabel htmlFor=\"password\">\r\n                                        Пароль\r\n                                    </InputLabel>\r\n                                    <Input type=\"password\" id=\"password\" {...input} data-testid=\"password-input\"\r\n                                           endAdornment={input.value.length >= 1 &&\r\n                                           <InputAdornment position=\"end\">\r\n                                               <ClearIcon onClick={form.mutators.clearPassword}/>\r\n                                           </InputAdornment>\r\n                                           } required/>\r\n                                    {meta.touched && meta.error &&\r\n                                    <span className=\"validation_error\">{meta.error}</span>}\r\n                                </FormControl>\r\n                            )}/>\r\n                        </Grid>\r\n                        <Grid item xs={12} align=\"right\" className=\"form_footer\">\r\n                            <Button className=\"btn\"\r\n                                    disabled={isLoading || submitting}\r\n                                    data-testid=\"formSubmitBtn\"\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\">\r\n                                Войти\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            )}\r\n        </Form>\r\n    );\r\n\r\n    return (\r\n        <LoginFormContainer/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: getIsLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {authRequest, regRequest};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\r\n","import LoginForm from './loginForm';\r\n\r\nexport default LoginForm;","import LogoutLayout from './logout';\r\n\r\nexport default LogoutLayout;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LoginForm from \"../../components/Forms/loginForm\";\r\nimport Logo from \"../../components/logo\";\r\nimport PageList from \"../../appData/pageList\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport './logout.scss';\r\n\r\nconst LogoutLayout = ({className, pageId}) => {\r\n\r\n    LogoutLayout.propTypes = {\r\n        className: PropTypes.string.isRequired,\r\n        pageId: PropTypes.string.isRequired\r\n    };\r\n\r\n    return (\r\n        <div data-testid=\"logout-layout\" className={`main_wrapper logout_wrapper ${className}_page_wrapper`}>\r\n            <div className='main_content'>\r\n                <div className={`content ${className}_content wrapper`}>\r\n                    <Grid container\r\n                          justify=\"center\"\r\n                          alignItems=\"center\"\r\n                    >\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Grid container justify=\"center\">\r\n                                <Logo type=\"light\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Paper className=\"paper_container\">\r\n                                <LoginForm isRegForm={pageId === PageList.signup.id}/>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogoutLayout;\r\n","import LoginPage from './login';\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport pageList from '../../appData/pageList';\r\nimport LogoutLayout from '../../layouts/logout';\r\n\r\nconst LoginPage = () =>  {\r\n        let pageId = pageList.login.id;\r\n\r\n        return (\r\n            <LogoutLayout className={pageId} pageId={pageId}/>\r\n        );\r\n};\r\n\r\nexport default LoginPage;\r\n","import SignupPage from './signup';\r\n\r\nexport default SignupPage;","import React from 'react';\r\nimport PageList from \"../../appData/pageList\";\r\nimport LogoutLayout from \"../../layouts/logout\";\r\n\r\nconst SignupPage = () => {\r\n    let pageId = PageList.signup.id;\r\n\r\n    return (\r\n        <LogoutLayout className={pageId} pageId={pageId}/>\r\n    );\r\n};\r\n\r\nexport default SignupPage;\r\n","import MapPage from \"../pages/map\";\r\nimport ProfilePage from \"../pages/profile\";\r\nimport LoginPage from \"../pages/login\";\r\nimport SignupPage from \"../pages/signup\";\r\n\r\nconst pageList = {\r\n    map: {\r\n        id: 'map',\r\n        path: '/map',\r\n        title: 'Карта',\r\n        component: MapPage,\r\n    },\r\n    profile: {\r\n        id: 'profile',\r\n        path: '/profile',\r\n        title: 'Профиль',\r\n        component: ProfilePage,\r\n    },\r\n    login: {\r\n        id: 'login',\r\n        path: '/',\r\n        title: 'Выйти',\r\n        component: LoginPage,\r\n    },\r\n    signup: {\r\n        id: 'signup',\r\n        path: '/signup',\r\n        component: SignupPage,\r\n        isNotInMenu: true,\r\n    },\r\n};\r\n\r\nexport default pageList;\r\n","import PrivateRoute from './privateRoute';\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport pageList from \"../../../appData/pageList\";\r\n\r\n\r\nconst PrivateRoute = ({component: Component, isAuthorized, redirectPath = pageList.signup.path, ...rest}) => (\r\n    <Route {...rest} render={(props) => (isAuthorized === true)\r\n        ? <Component {...props}/>\r\n        : <Redirect to={redirectPath}/>\r\n    }/>\r\n);\r\n\r\nexport default PrivateRoute;\r\n","import Router from './router';\r\n\r\nexport default Router;","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport PrivateRoute from './privateRoute';\r\nimport pageList from '../../appData/pageList';\r\nimport {getIsAuthorized} from \"../../modules/auth\";\r\nimport {connect} from \"react-redux\";\r\nimport MapPage from \"../../pages/map\";\r\nimport ProfilePage from \"../../pages/profile\";\r\nimport LoginPage from \"../../pages/login\";\r\nimport SignupPage from \"../../pages/signup\";\r\n\r\nexport const Router = ({isAuthorized}) => {\r\n    let router = null;\r\n    let mapPath = pageList.map.path;\r\n    let loginPath = pageList.login.path;\r\n    let signupPath = pageList.signup.path;\r\n\r\n    if (isAuthorized) {\r\n        router = <Switch>\r\n            <PrivateRoute isAuthorized={isAuthorized} path={mapPath} component={MapPage}/>\r\n            <PrivateRoute isAuthorized={isAuthorized} path={pageList.profile.path} component={ProfilePage}/>\r\n            <Redirect to={mapPath}/>\r\n        </Switch>\r\n    } else {\r\n        router = <Switch>\r\n            <Route exact={true} path={loginPath} component={LoginPage}/>\r\n            <Route path={signupPath} component={SignupPage}/>\r\n            <Redirect to={signupPath}/>\r\n        </Switch>\r\n    }\r\n\r\n    return router;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthorized: getIsAuthorized(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Router);\r\n","import App from './app';\r\n\r\nexport default App;","import React from 'react';\r\nimport Router from '../Router';\r\nimport './app.scss';\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"app\" id=\"app\" data-testid=\"app\">\r\n            <Router/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import env from \"../../appData/env\";\r\n\r\nconst GET = 'GET';\r\nconst POST = 'POST';\r\nconst baseUrl = env.LOFT_TAXI_API_URL;\r\nconst headers = {'Content-Type': 'application/json'};\r\nexport const TRANSPORT_ERROR_MSG = 'Не удалось получить данные от сервера: ';\r\n\r\nconst auth = request =>\r\n    fetch(`${baseUrl}auth`, {\r\n        method: POST,\r\n        headers: headers,\r\n        body: JSON.stringify(request),\r\n    }).then(response => response.json());\r\n\r\nconst reg = request =>\r\n    fetch(`${baseUrl}register`, {\r\n        method: POST,\r\n        headers: headers,\r\n        body: JSON.stringify(request),\r\n    }).then(response => response.json());\r\n\r\nconst setCard = request =>\r\n    fetch(`${baseUrl}card`, {\r\n        method: POST,\r\n        headers: headers,\r\n        body: JSON.stringify(request),\r\n    }).then(response => response.json());\r\n\r\nconst fetchCard = token =>\r\n    fetch(`${baseUrl}card?token=${token}`, {\r\n        method: GET,\r\n        headers: headers,\r\n    }).then(response => response.json());\r\n\r\nconst fetchAddressList = () =>\r\n    fetch(`${baseUrl}addressList`, {\r\n        method: GET,\r\n        headers: headers,\r\n    }).then(response => response.json());\r\n\r\nconst fetchRoute = ({addressFrom, addressTo}) =>\r\n    fetch(`${baseUrl}route?address1=${addressFrom}&address2=${addressTo}`, {\r\n        method: GET,\r\n        headers: headers,\r\n    }).then(response => response.json());\r\n\r\nexport {auth, reg, setCard, fetchCard, fetchAddressList, fetchRoute};","import {authSuccess, authFailure} from \"./actions\";\r\nimport {call, put} from 'redux-saga/effects';\r\nimport {auth, reg, TRANSPORT_ERROR_MSG} from '../../helpers/loftTaxiApi';\r\nimport {fetchCardRequest} from \"../card\";\r\n\r\nexport function* handleAuthorization(action) {\r\n    try {\r\n        const response = yield call(auth, action.payload);\r\n        const {success, token, error} = response;\r\n\r\n        if (success) {\r\n            yield put(authSuccess(token));\r\n            yield put(fetchCardRequest({token}));\r\n        } else if (error) {\r\n            yield put(authFailure(error));\r\n        }\r\n    } catch (error) {\r\n        yield put(authFailure(TRANSPORT_ERROR_MSG + error.message));\r\n    }\r\n}\r\n\r\nexport function* handleRegistration(action) {\r\n    try {\r\n        const response = yield call(reg, action.payload);\r\n        const {success, token, error} = response;\r\n\r\n        if (success) {\r\n            yield put(authSuccess(token));\r\n        } else if (error) {\r\n            yield put(authFailure(error));\r\n        }\r\n    } catch (error) {\r\n        yield put(authFailure(TRANSPORT_ERROR_MSG + error.message));\r\n    }\r\n}\r\n","import {call, put} from 'redux-saga/effects';\r\nimport {fetchCardFailure, fetchCardSuccess, setCardSuccess, setCardFailure} from \"./actions\";\r\nimport {fetchCard, setCard, TRANSPORT_ERROR_MSG} from '../../helpers/loftTaxiApi';\r\n\r\nexport function* handleGettingCard(action) {\r\n    try {\r\n        const data = yield call(fetchCard, action.payload.token);\r\n\r\n        if (data.id) {\r\n            yield put(fetchCardSuccess(data));\r\n        } else {\r\n            yield put(fetchCardFailure(data.error));\r\n        }\r\n    } catch (error) {\r\n        yield put(fetchCardFailure(TRANSPORT_ERROR_MSG + error.message));\r\n    }\r\n}\r\n\r\nexport function* handleSettingCard(action) {\r\n    let payload = action.payload;\r\n\r\n    try {\r\n        const data = yield call(setCard, payload);\r\n\r\n        if (data.success) {\r\n            yield put(setCardSuccess(payload));\r\n        } else {\r\n            yield put(setCardFailure(data.error));\r\n        }\r\n    } catch (error) {\r\n        yield put(setCardFailure(TRANSPORT_ERROR_MSG + error.message));\r\n    }\r\n}\r\n","import {\r\n    fetchAddressListSuccess,\r\n    fetchAddressListFailure,\r\n    fetchRouteSuccess,\r\n    fetchRouteFailure,\r\n    placeOrder\r\n} from \"./actions\";\r\nimport {call, put} from 'redux-saga/effects';\r\nimport {fetchRoute, fetchAddressList, TRANSPORT_ERROR_MSG} from '../../helpers/loftTaxiApi';\r\n\r\n\r\nexport function* handleFetchingAddressList(action) {\r\n    try {\r\n        const response = yield call(fetchAddressList, action.payload);\r\n        const {addresses, error} = response;\r\n\r\n        if (addresses) {\r\n            yield put(fetchAddressListSuccess(addresses.sort()));\r\n        } else {\r\n            yield put(fetchAddressListFailure(error));\r\n        }\r\n    } catch (error) {\r\n        yield put(fetchAddressListFailure(TRANSPORT_ERROR_MSG + error.message));\r\n    }\r\n}\r\n\r\nexport function* handleFetchingRoute(action) {\r\n    try {\r\n        const response = yield call(fetchRoute, action.payload);\r\n\r\n        if (response.length) {\r\n            yield put(fetchRouteSuccess(response));\r\n            yield put(placeOrder());\r\n        } else {\r\n            yield put(fetchRouteFailure(\"Поездка невозможна, с сервера не был получен маршрут\"));\r\n        }\r\n    } catch (error) {\r\n        yield put(fetchRouteFailure(TRANSPORT_ERROR_MSG + error.message));\r\n    }\r\n}\r\n","import {handleAuthorization, handleRegistration} from \"./auth/sagas\";\r\nimport {handleGettingCard, handleSettingCard} from \"./card/sagas\";\r\nimport {handleFetchingAddressList, handleFetchingRoute} from \"./routes/sagas\";\r\nimport {authRequest, regRequest} from \"./auth\";\r\nimport {fetchCardRequest, setCardRequest} from \"./card\";\r\nimport {takeLatest} from \"redux-saga/effects\";\r\nimport {fetchAddressListRequest, fetchRouteRequest} from \"./routes\";\r\n\r\n\r\nexport function* rootSaga() {\r\n    yield takeLatest(authRequest, handleAuthorization);\r\n    yield takeLatest(regRequest, handleRegistration);\r\n\r\n    yield takeLatest(fetchCardRequest, handleGettingCard);\r\n    yield takeLatest(setCardRequest, handleSettingCard);\r\n\r\n    yield takeLatest(fetchAddressListRequest, handleFetchingAddressList);\r\n    yield takeLatest(fetchRouteRequest, handleFetchingRoute);\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport auth from './auth';\r\nimport card from './card';\r\nimport routes from './routes';\r\n\r\nexport default combineReducers({\r\n    auth, card, routes\r\n});\r\n","import {createStore, compose, applyMiddleware} from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {rootSaga} from \"./modules/rootSaga\";\r\nimport {setLocalStorageState} from './helpers/localStorage';\r\nimport rootReducer from './modules';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst createAppStore = (initialState) => {\r\n    const store = createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(\r\n            applyMiddleware(sagaMiddleware),\r\n            window.__REDUX_DEVTOOLS_EXTENSION__\r\n                ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n                : noop => noop,\r\n        ),\r\n    );\r\n\r\n    store.subscribe(() => {\r\n        setLocalStorageState({\r\n            auth: store.getState().auth,\r\n            card: store.getState().card,\r\n            routes: store.getState().routes,\r\n        })\r\n    });\r\n\r\n    sagaMiddleware.run(rootSaga);\r\n\r\n    return store;\r\n};\r\n\r\n\r\nexport default createAppStore;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\nimport {theme} from \"loft-taxi-mui-theme\";\r\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {getLocalStorageState} from './helpers/localStorage';\r\nimport createStore from './store';\r\nimport './index.scss';\r\n\r\nconst store = createStore(getLocalStorageState());\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <MuiThemeProvider theme={theme}>\r\n                <App/>\r\n            </MuiThemeProvider>\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}